language: node_js
cache: npm
env:
  - CI=false

jobs:
  include:
    - # dev branch PR
      if: branch = dev AND type = pull_request
      name: "Linting check"
      install: npm i
      script: npm run lint
      after_success: echo 'LINTING CHECK PASSED'
      after_failure: cat /home/travis/.npm/_logs/*.log


    - # test branch merge
      if: branch = test AND type = push
      name: "Test env checks"
      install: ''
      script: ''


    - # prod branch merge
      if: branch = production AND type = push
      name: "Prod env checks"
      install: ''
      script: ''


    - # dev branch merge
      if: branch = dev AND (type = push OR type = api)
      name: "Lint and Deploy"
      install:
        - npm install
        - pip install awscli --upgrade --user
        - aws configure set aws_access_key_id AKIAJIY46DTMNEI7UFBQ
        - aws configure set aws_secret_access_key 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
        - aws configure set default.region us-east-1
        - aws configure set default.output text
      script: npm run lint && npm run build:development
      after_success:
        - echo 'Project built'
      after_failure:
        - echo 'Project failed to build'
      before_deploy: aws s3 rm s3://dev.knovva.com --recursive
      deploy:
        provider: s3
        access_key_id: "AKIAJIY46DTMNEI7UFBQ"
        secret_access_key: "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"
        bucket: "dev.knovva.com"
        region: "us-east-1"
        skip_cleanup: true
        acl: public_read
        local_dir: build
        on:
          branch: dev
      after_deploy: aws cloudfront create-invalidation --distribution-id E2H7E77JEMGOI1 --paths "/*"


    - # test env manual deploy
      if: branch = test AND type = api
      name: "Deploy test env"
      install:
        - npm install
        - pip install awscli --upgrade --user
        - aws configure set aws_access_key_id AKIAJIY46DTMNEI7UFBQ
        - aws configure set aws_secret_access_key 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
        - aws configure set default.region ap-southeast-2
        - aws configure set default.output text
      script: npm run build:test
      before_deploy: aws s3 rm s3://test.knovva.com --recursive
      deploy:
        provider: s3
        access_key_id: "AKIAJIY46DTMNEI7UFBQ"
        secret_access_key: "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"
        bucket: "test.knovva.com"
        region: "ap-southeast-2"
        skip_cleanup: true
        acl: public_read
        local_dir: build
        on:
          branch: test
      after_deploy:
        - aws cloudfront create-invalidation --distribution-id E1V9KXLU638SRA --paths "/*"
        

    - # prod env manual deploy
      if: branch = production AND type = api
      name: "Deploy prod env"
      install:
        - npm install
        - pip install awscli --upgrade --user
        - aws configure set aws_access_key_id AKIAJIY46DTMNEI7UFBQ
        - aws configure set aws_secret_access_key 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
        - aws configure set default.region us-east-1
        - aws configure set default.output text
      script: npm run build:production
      before_deploy: aws s3 rm s3://online.knovva.com --recursive
      deploy:
        provider: s3
        access_key_id: "AKIAJIY46DTMNEI7UFBQ"
        secret_access_key: "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"
        bucket: "online.knovva.com"
        region: "us-east-1"
        skip_cleanup: true
        acl: public_read
        local_dir: build
        on:
          branch: production
      after_deploy:
        - aws cloudfront create-invalidation --distribution-id EQZ1U2VQIPIEV --paths "/*"


notifications:
  slack:
    on_pull_requests: false
    rooms:
      - knovva-academy:mVB7gR0yXYzhPc72r5eKAO0h#builds
    template:
      - "Repo `%{repository_slug}` *%{result}* build (<%{build_url}|#%{build_number}>) for commit (<%{compare_url}|%{commit}>) on branch `%{branch}`."
      - "Execution time: %{duration}"
      - "Author: *%{author}*"
      - "Message: %{message}"
